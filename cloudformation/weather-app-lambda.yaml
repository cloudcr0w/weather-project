Resources:
  WeatherAppAnalyzeLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AnalyzeWeatherData
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: weather-app-code-bucket
        S3Key: analyze_weather_lambda.zip
      Role: !GetAtt WeatherAppLambdaRole.Arn

  WeatherAppGetWeatherLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetWeatherData
      Runtime: python3.9
      Handler: main.lambda_handler
      Code:
        S3Bucket: weather-app-code-bucket
        S3Key: get_weather_lambda.zip
      Role: !GetAtt WeatherAppLambdaRole.Arn

  WeatherAppLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WeatherAppPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - s3:GetObject
                Resource: '*'

  WeatherAppEventRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(1 day)
      Targets:
        - Arn: !GetAtt WeatherAppGetWeatherLambda.Arn
          Id: WeatherAppGetWeatherLambdaTarget
